pipeline {
    agent {
        label 'SERVER01'
    }
    triggers {
        githubPush()
    }
    environment {
        DOCKER_HUB_REGISTRY = "s5audrey"
        DOCKER_CREDENTIAL_ID = 'audreymelhy-docker-hub-auth'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        skipDefaultCheckout(true)
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: '')
        // string(name: 'UI_IMAGE_TAG', defaultValue: 'latest', description: '')
        // string(name: 'AUTH_IMAGE_TAG', defaultValue: 'latest', description: '')
        // string(name: 'WEATHER_IMAGE_TAG', defaultValue: 'latest', description: '')
        // string(name: 'REDIS_IMAGE_TAG', defaultValue: 'latest', description: '')
        // string(name: 'DB_IMAGE_TAG', defaultValue: 'latest', description: '')
    }
    stages {
        stage('Sanity Check') {
            steps {
                script{
                   sanity_check() 
                }
            }
        }
        stage('Checkout') {
            steps {
                dir("${WORKSPACE}/code") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            url: 'https://github.com/AudreyMelhy/the-weather-app.git',
                            credentialsId: 'audrey-github-auth'
                        ]]
                    ])
                }
            }
        }
        // stage('SonarQube Analysis') {
        //     steps {
        //         dir("${WORKSPACE}/code") {
        //             script {
        //                 withSonarQubeEnv('SonarScanner') {
        //                     sh "sonar-scanner"
        //                     // sh "sonar-scanner --version"
        //                 }
        //             }
        //         }
        //     }
        // }
        stage('Building Auth') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/auth") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
        stage('Building db') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/db") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
        stage('Building redis') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/redis") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
        stage('Building ui') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/ui") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
        stage('Building weather') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/weather") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
        stage('Pushing images to dockerhub') {
            steps {
                script {
                    dir("${WORKSPACE}/code/code/weather") {
                        sh """
                            cat Dockerfile
                            docker images
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(
                color: '#2EB67D',
                channel: 'audrey-perso', 
                message: "*Weather app Project Build Status*" +
                "\n Project Name: Weather app" +
                "\n Job Name: ${env.JOB_NAME}" +
                "\n Build number: ${currentBuild.displayName}" +
                "\n Build Status : *SUCCESS*" +
                "\n Build url : ${env.BUILD_URL}"
            )
        }
        failure {
            slackSend(
                color: '#E01E5A',
                channel: 'audrey-perso',  
                message: "*Weather app Project Build Status*" +
                "\n Project Name: Weather app" +
                "\n Job Name: ${env.JOB_NAME}" +
                "\n Build number: ${currentBuild.displayName}" +
                "\n Build Status : *FAILED*" +
                "\n Build User : *AudreyM*" +
                "\n Action : Please check the console output to fix this job IMMEDIATELY" +
                "\n Build url : ${env.BUILD_URL}"
            )
        }
        unstable {
            slackSend(
                color: '#ECB22E',
                channel: 'audrey-perso', 
                message: "*Weather app Project Build Status*" +
                "\n Project Name: Weather app" +
                "\n Job Name: ${env.JOB_NAME}" +
                "\n Build number: ${currentBuild.displayName}" +
                "\n Build Status : *UNSTABLE*" +
                "\n Action : Please check the console output to fix this job IMMEDIATELY" +
                "\n Build url : ${env.BUILD_URL}"
            )
        }   
    }
}
def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()){
       echo "The parameter BRANCH_NAME is not set"
       sh 'exit 2'
   } 
}
