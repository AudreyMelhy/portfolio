pipeline {
    agent {
        label 'SERVER02'
    }
    triggers {
        // This trigger is for GitHub webhooks
        githubPush()
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        skipDefaultCheckout(true)
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'MINUTES')
        timestamps()
    }
    environment {
        DOCKER_HUB_REGISTRY = "s5audrey"
        DOCKER_CREDENTIAL_ID = 'audreymelhy-docker-hub-auth'
        SONARQUBE_SERVER = 'https://sonarqube.ektechsoftwaresolution.com'
    }
    // environment {
    //     // Define the password for sudo operations
    //     SUDO_PASSWORD = credentials('jenkins-auth')
    // }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: '')
        string(name: 'SONAR_IMAGE_VERSION', defaultValue: 'latest', description: '') 
    }
    stages {
        stage('Checkout') {
            steps {
                dir("${WORKSPACE}/app") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            url: 'https://github.com/AudreyMelhy/the-weather-app.git',
                            credentialsId: 'audrey-github-auth'
                        ]]
                    ])
                }
            }
        }  
        stage('Building Sonar Image') {
            steps {
                script {
                    dir("${WORKSPACE}/app/sonar-scanner") {
                        sh """
                        docker build -t ${env.DOCKER_HUB_REGISTRY}/weatherapp-sonar-scanner:${params.SONAR_IMAGE_VERSION} .
                        docker images

                        """
                    }
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'audreymelhy-docker-hub-auth', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        """    
                    }
                }
            }
        } 
        stage('Pushing images to dockerhub') {
            steps {
                script {
                    dir("${WORKSPACE}/app/code") {
                        sh """
                            docker push ${env.DOCKER_HUB_REGISTRY}/weatherapp-weather:${params.SONAR_IMAGE_VERSION}                       
                           
                        """
                    }
                }
            }
        }
        stage('Check and remove existing sonar-project.properties') {
            steps {
                script {
                    def propertiesFile = "${WORKSPACE}/app/code/sonar-project.properties"
                    if (fileExists(propertiesFile)) {
                        echo "Found existing sonar-project.properties file. Removing..."
                        sh "rm -rf ${propertiesFile}"
                    } else {
                        echo "No existing sonar-project.properties file found."
                    }
                }
            }
        }

        stage('Create sonar-project.properties') {
            steps {
                dir("${WORKSPACE}/app/code") {
                    script {
                        def sonarProjectPropertiesContent = """
                            sonar.host.url=https://sonarqube.devopseasylearning.uk/
                            sonar.projectKey=my-sonar-project
                            sonar.projectName=my-sonar-project
                            sonar.sources=.
                            sonar.projectVersion=1.1.1
                            qualitygate.wait=true
                        """
                        writeFile file: 'sonar-project.properties', text: sonarProjectPropertiesContent
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            def scannerHome = tool 'SonarScanner';
            steps {
                script {
                    dir("${WORKSPACE}/app/code") {
                        docker.image("${env.DOCKER_HUB_REGISTRY}/weatherapp-sonar-scanner:${params.SONAR_IMAGE_VERSION}").inside('-u 0:0') {
                            withSonarQubeEnv(SONARQUBE_SERVER) {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner
                                    ls -l 
                                    pwd
                                    echo "SonarScanner binaries are located at: /usr/local/bin/sonar-scanner"
                                    sonar-scanner --version
                                    sonar-scanner
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}    


http://server3.anomicatech.com:8080/job/sonar.jenkinsfile/build?token=squ_07981c0172e41e3806a1215a51d535ceb0a24a4e